pipeline {
    agent any
    
    environment {
        SONAR_PROJECT_KEY = 'Giabaoday_Sample-microservice'
        SONAR_ORG = 'giabaoday'
    }
    
    tools {
        maven 'Maven'         
        jdk 'JDK11'            
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Code ƒë√£ ƒë∆∞·ª£c checkout t·ª´ GitHub'
                sh 'ls -la'
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Building application v·ªõi Maven...'
                sh '''
                    mvn clean compile
                    echo "Maven build completed!"
                '''
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Running unit tests...'
                sh '''
                    mvn test
                    echo "All tests passed!"
                '''
            }
            post {
                always {
                    junit testResults: 'target/surefire-reports/*.xml', allowEmptyResults: true
                }
            }
        }
        
        stage('SonarCloud Analysis') {
            steps {
                echo 'üîç Running SonarCloud code quality analysis...'
                withSonarQubeEnv('SonarCloud') {  
                    sh '''
                        mvn clean verify sonar:sonar \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.organization=${SONAR_ORG} \
                            -Dsonar.host.url=https://sonarcloud.io
                    '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                echo '‚è≥ Waiting for SonarCloud Quality Gate...'
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
                echo '‚úÖ Quality Gate passed!'
            }
        }
        
        stage('Security Scan - Snyk') {
            tools {
                snyk 'Snyk'  
            }
            steps {
                echo 'üõ°Ô∏è Running Snyk security scan...'
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    sh '''
                        # Authenticate with Snyk
                        snyk auth $SNYK_TOKEN
                        
                        echo "üìã Scanning dependencies for vulnerabilities..."
                        snyk test \
                            --severity-threshold=high \
                            --json > snyk-report.json || echo "Vulnerabilities found, but continuing..."
                        
                        echo "üìä Snyk scan results:"
                        snyk test --severity-threshold=medium || echo "Scan completed with findings"
                        
                        echo "üîÑ Monitoring project in Snyk dashboard..."
                        snyk monitor \
                            --project-name="github-auto-pipeline-${BUILD_NUMBER}" \
                            --project-tags="environment=ci,build=${BUILD_NUMBER}" || echo "Monitoring setup completed"
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'snyk-report.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    sh '''
                        if [ -f Dockerfile ]; then
                            echo "Dockerfile found, building image..."
                            docker build -t demo-app:${BUILD_NUMBER} .
                            docker tag demo-app:${BUILD_NUMBER} demo-app:latest
                            echo "Docker image built successfully!"
                        else
                            echo "No Dockerfile found, skipping Docker build"
                        fi
                    '''
                }
            }
        }
        
        stage('Container Security Scan') {
            when {
                expression { fileExists('Dockerfile') }
            }
            tools {
                snyk 'Snyk'
            }
            steps {
                echo 'üîç Scanning Docker image for vulnerabilities...'
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    script {
                        sh '''
                            snyk auth $SNYK_TOKEN
                            
                            echo "üê≥ Scanning container image..."
                            snyk container test demo-app:${BUILD_NUMBER} \
                                --severity-threshold=high \
                                --json > snyk-container-report.json || echo "Container vulnerabilities found"
                            
                            echo "üìä Container scan results:"
                            snyk container test demo-app:${BUILD_NUMBER} \
                                --severity-threshold=medium || echo "Container scan completed"
                            
                            echo "üîÑ Monitoring container image..."
                            snyk container monitor demo-app:${BUILD_NUMBER} \
                                --project-name="demo-app-container-${BUILD_NUMBER}" || echo "Container monitoring setup"
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'snyk-container-report.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'üöÄ Deploying application...'
                sh '''
                    echo "Deployment to staging environment..."
                    echo "Application version: ${BUILD_NUMBER}"
                    echo "Deployment successful!"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
        }
        success {
            echo ''
            echo 'üéâ ===== PIPELINE SUCCESS ===== üéâ'
            echo '‚úÖ Code checkout completed'
            echo '‚úÖ Build successful'
            echo '‚úÖ Tests passed'
            echo '‚úÖ SonarCloud quality gate passed'
            echo '‚úÖ Security scans completed'
            echo '‚úÖ Deployment successful'
            echo ''
            echo 'üìä Reports available:'
            echo '   - SonarCloud: https://sonarcloud.io'
            echo '   - Snyk Dashboard: https://app.snyk.io'
            echo '   - Jenkins Artifacts: Check build artifacts'
            echo '================================='
        }
        failure {
            echo ''
            echo '‚ùå ===== PIPELINE FAILED ===== ‚ùå'
            echo 'Pipeline execution failed. Check logs above for details.'
            echo ''
            echo 'üîß Common issues:'
            echo '   - SonarCloud quality gate failed'
            echo '   - Critical security vulnerabilities found'
            echo '   - Build or test failures'
            echo '   - Tool configuration issues'
            echo ''
            echo 'üí° Next steps:'
            echo '   1. Check SonarCloud report for code quality issues'
            echo '   2. Review Snyk report for security vulnerabilities'
            echo '   3. Fix issues and push new code'
            echo '================================='
        }
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings - check security scan results'
        }
    }
}